// Kadane's algo
class Solution {
public:
    int maxSubArray(vector<int>& nums)
     {
       int sum=0;
       int maxi=nums[0];
       for(int i=0;i<nums.size();i++)
       {
           
           sum=sum+nums[i];
           maxi=max(sum,maxi);
           if(sum<0)
           sum=0;
       }   
       return maxi; 
    }
};



// order of n3 -> shows time limit exceeded

class Solution {
public:
    int maxSubArray(vector<int>& nums)
     {
         int n=nums.size();
         int maxSum = INT_MIN; 
       for(int i=0;i<n;i++)
       {
           for(int j=i;j<n;j++)
           {
               int sum=0;
               for(int k=i;k<=j;k++)
               {
                  sum+=nums[k];
               }
                maxSum = max(maxSum, sum);
           }
       }
       return maxSum;
    }
};



// order of n2 -> shows time limit exceeded

class Solution {
public:
    int maxSubArray(vector<int>& nums)
     {
         int n=nums.size();
         int maxSum = INT_MIN; 
       for(int i=0;i<n;i++)
       {
             int sum=0;
           for(int j=i;j<n;j++)
           {
             sum+=nums[j];
              
                maxSum = max(maxSum, sum);
           }
       }
       return maxSum;
    }
};
